__author__ = 'Sony'

'''Standard python modules'''
import sys

'''For scientific computing'''
from numpy import *
import scipy.optimize

'''For plotting'''
from matplotlib import pyplot, cm
from mpl_toolkits.mplot3d import Axes3D

import os


def hypo(X, theta):
    return X.dot(theta)


def computeCostVect(X, y, theta):
    """Compute cost, vectorized version"""
    m 	 = len(y)
    y = y.reshape(m, 1)
    term = hypo(X, theta) - y

    return (term.T.dot(term) / (2 * m))[0, 0] #?? [0, 0] ??


def gradDescVect(X, y, theta, alpha, iters):
    """Run a Vectorized gradient descent"""
    m = shape(X)[0]
    grad = copy(theta)
    J_history = []
    J_history.append(computeCostVect(X, y, theta))
    for c in range(1, iters):
        error_sum = hypo(X, grad) - y
        error_sum = X.T.dot(error_sum)
        grad -= (alpha/m)*error_sum
        # print(computeCostVect(X, y, grad))
        J_history.append(computeCostVect(X, y, grad))

    return J_history, grad

"""     COST FUNCTION FOR SCIPY.OPTIMZE.MINIMIZE()      """
def computeCostScipy(theta, X, y, lamda):
    """Compute cost, vectorized version"""
    m 	 = len(y)
    term = hypo(X, theta).reshape(m, 1) - y
    # print("****")
    # print((term.T.dot(term) / (2 * m))[0, 0])

    return (lamda/(2*m))*(theta.T.dot(theta)) + (term.T.dot(term) / (2 * m))[0, 0] #?? [0, 0] ??


def findMinTheta(theta, X, y, lamda):
    result = scipy.optimize.minimize( computeCostScipy, theta, args=(X, y, lamda),  method='BFGS', options={"maxiter":5000, "disp":True} )
    return result.x, result.fun


def mapFeature(X1, X2):
    degree = 1
    out = ones((shape(X1)[0], 1))
    for i in range(1, degree+1):
        for j in range(0, i+1):
            term1 = X1**(i-j)
            term2 = X2 ** (j)
            term  = (term1 * term2).reshape( shape(term1)[0], 1 )
            """note that here 'out[i]' represents mappedfeatures of X1[i], X2[i], ..........   out is made to store features of one set in out[i] horizontally """
            out   = hstack(( out, term ))
    return out[:, 1:]


def solve():
    n, m = input().split()
    m = int(m)
    n = int(n)
    data = zeros((m, n+1))
    for i in range(0, m):
        ausi = input().split()
        for k in range(0, n+1):
            data[i, k] = float(ausi[k])
    X = data[:, 0 : n]
    y = data[:, n]

    theta = ones((2, 1))

    X = mapFeature(X[:, 0], X[:, 1])
    ausi = computeCostVect(X, y, theta)
    # print(X)
    print("Results usning BFGS : ")
    lamda = 0.03
    theta, cost = findMinTheta(theta, X, y, lamda)

    print(ausi)

    test = [0.05, 0.54, 0.91, 0.91, 0.31, 0.76, 0.51, 0.31]
    print("prediction for 0.31 , 0.76 (using BFGS) : ")
    for i in range(0, 7, 2):
        print(mapFeature(array([test[i]]), array([test[i+1]])).dot( theta ))
    print(theta)
    # pyplot.plot(X[:, 1], y, 'rx', markersize = 5)
    # fig = pyplot.figure()
    # ax = fig.add_subplot(1,1,1)
    # ax.scatter(X[:, 1],X[:, 2], s=y) # Added third variable income as size of the bubble
    # pyplot.show()

    theta0_vals = linspace(0, 8000, 100)
    theta1_vals = linspace(0, 8000, 100)

    J_vals = zeros((len(theta0_vals), len(theta1_vals)), dtype=float64)
    for i, v0 in enumerate(theta0_vals):
        for j, v1 in enumerate(theta1_vals):
            theta = mapFeature(array([i]), array([j])).reshape(2, 1)
            # print(str(i) + " " + str(j) + " " + str(mapFeature(array([i]), array([j])).dot( theta )))
            J_vals[i, j] = computeCostVect(X, y, theta)
    #
    R, P = meshgrid(theta0_vals, theta1_vals)
    #
    fig = pyplot.figure()
    ax 	= fig.gca(projection='3d')
    ax.plot_surface(R, P, J_vals)
    pyplot.show(block=True)
    #
    fig = pyplot.figure()
    ax 	= fig.gca(projection='3d')
    pyplot.contour(R, P, J_vals.T, logspace(-2, 3, 200))
    pyplot.plot(theta[0], theta[1], 'rx', markersize = 10)
    pyplot.show(block=True)

def main():
    solve()

if __name__ == '__main__':
    main()